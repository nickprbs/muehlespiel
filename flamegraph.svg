<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="390" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="373.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="373.00"> </text><svg id="frames" x="10" width="1180" total_samples="4673"><g><title>libdyld.dylib`dyld4::LibSystemHelpers::getenv (1 samples, 0.02%)</title><rect x="0.0000%" y="309" width="0.0214%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.02%)</title><rect x="0.0000%" y="293" width="0.0214%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`read (1 samples, 0.02%)</title><rect x="0.0214%" y="245" width="0.0214%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="1"/><text x="0.2714%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (13 samples, 0.28%)</title><rect x="0.0428%" y="245" width="0.2782%" height="15" fill="rgb(248,212,6)" fg:x="2" fg:w="13"/><text x="0.2928%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.06%)</title><rect x="0.9416%" y="229" width="0.0642%" height="15" fill="rgb(208,68,35)" fg:x="44" fg:w="3"/><text x="1.1916%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (41 samples, 0.88%)</title><rect x="1.0058%" y="229" width="0.8774%" height="15" fill="rgb(232,128,0)" fg:x="47" fg:w="41"/><text x="1.2558%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.04%)</title><rect x="1.8404%" y="213" width="0.0428%" height="15" fill="rgb(207,160,47)" fg:x="86" fg:w="2"/><text x="2.0904%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (42 samples, 0.90%)</title><rect x="1.8832%" y="229" width="0.8988%" height="15" fill="rgb(228,23,34)" fg:x="88" fg:w="42"/><text x="2.1332%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (44 samples, 0.94%)</title><rect x="2.7819%" y="229" width="0.9416%" height="15" fill="rgb(218,30,26)" fg:x="130" fg:w="44"/><text x="3.0319%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="3.7235%" y="229" width="0.0214%" height="15" fill="rgb(220,122,19)" fg:x="174" fg:w="1"/><text x="3.9735%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_try_free_default (5 samples, 0.11%)</title><rect x="3.7449%" y="229" width="0.1070%" height="15" fill="rgb(250,228,42)" fg:x="175" fg:w="5"/><text x="3.9949%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (6 samples, 0.13%)</title><rect x="3.8519%" y="229" width="0.1284%" height="15" fill="rgb(240,193,28)" fg:x="180" fg:w="6"/><text x="4.1019%" y="239.50"></text></g><g><title> 3] as muehlespiel::datastructures::game_board::UsefulGameBoard&gt;::from_pieces (1 samples, 0.02%)</title><rect x="3.9803%" y="213" width="0.0214%" height="15" fill="rgb(216,20,37)" fg:x="186" fg:w="1"/><text x="4.2303%" y="223.50"></text></g><g><title>muehlespiel`&lt;[u16 (2 samples, 0.04%)</title><rect x="3.9803%" y="229" width="0.0428%" height="15" fill="rgb(206,188,39)" fg:x="186" fg:w="2"/><text x="4.2303%" y="239.50"></text></g><g><title> 3] as muehlespiel::datastructures::game_board::UsefulGameBoard&gt;::get_representative (1 samples, 0.02%)</title><rect x="4.0017%" y="213" width="0.0214%" height="15" fill="rgb(217,207,13)" fg:x="187" fg:w="1"/><text x="4.2517%" y="223.50"></text></g><g><title>muehlespiel`&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.04%)</title><rect x="4.0231%" y="229" width="0.0428%" height="15" fill="rgb(231,73,38)" fg:x="188" fg:w="2"/><text x="4.2731%" y="239.50"></text></g><g><title>muehlespiel`&lt;muehlespiel::iterators::board_equivalence_class_iterator::BoardEquivalenceClassIterator as core::iter::traits::iterator::Iterator&gt;::next (2,104 samples, 45.02%)</title><rect x="4.0659%" y="229" width="45.0246%" height="15" fill="rgb(225,20,46)" fg:x="190" fg:w="2104"/><text x="4.3159%" y="239.50">muehlespiel`&lt;muehlespiel::iterators::board_equivalence_class_iterator::Boa..</text></g><g><title>muehlespiel`&lt;muehlespiel::iterators::n_range_locations_iterator::NRangeLocationsIterator as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.32%)</title><rect x="49.0905%" y="229" width="0.3210%" height="15" fill="rgb(210,31,41)" fg:x="2294" fg:w="15"/><text x="49.3405%" y="239.50"></text></g><g><title>muehlespiel`DYLD-STUB$$free (10 samples, 0.21%)</title><rect x="49.4115%" y="229" width="0.2140%" height="15" fill="rgb(221,200,47)" fg:x="2309" fg:w="10"/><text x="49.6615%" y="239.50"></text></g><g><title>muehlespiel`DYLD-STUB$$malloc (2 samples, 0.04%)</title><rect x="49.6255%" y="229" width="0.0428%" height="15" fill="rgb(226,26,5)" fg:x="2319" fg:w="2"/><text x="49.8755%" y="239.50"></text></g><g><title>muehlespiel`DYLD-STUB$$memcpy (2 samples, 0.04%)</title><rect x="49.6683%" y="229" width="0.0428%" height="15" fill="rgb(249,33,26)" fg:x="2321" fg:w="2"/><text x="49.9183%" y="239.50"></text></g><g><title>muehlespiel`alloc::raw_vec::finish_grow (3 samples, 0.06%)</title><rect x="49.7111%" y="229" width="0.0642%" height="15" fill="rgb(235,183,28)" fg:x="2323" fg:w="3"/><text x="49.9611%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`write (2 samples, 0.04%)</title><rect x="49.7753%" y="213" width="0.0428%" height="15" fill="rgb(221,5,38)" fg:x="2326" fg:w="2"/><text x="50.0253%" y="223.50"></text></g><g><title>muehlespiel`core::fmt::write (3 samples, 0.06%)</title><rect x="49.7753%" y="229" width="0.0642%" height="15" fill="rgb(247,18,42)" fg:x="2326" fg:w="3"/><text x="50.0253%" y="239.50"></text></g><g><title>muehlespiel`core::fmt::num::imp::_&lt;impl core::fmt::Display for i32&gt;::fmt (1 samples, 0.02%)</title><rect x="49.8181%" y="213" width="0.0214%" height="15" fill="rgb(241,131,45)" fg:x="2328" fg:w="1"/><text x="50.0681%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`write (1 samples, 0.02%)</title><rect x="49.8181%" y="197" width="0.0214%" height="15" fill="rgb(249,31,29)" fg:x="2328" fg:w="1"/><text x="50.0681%" y="207.50"></text></g><g><title>muehlespiel`core::slice::memchr::memchr_aligned (2 samples, 0.04%)</title><rect x="49.8395%" y="229" width="0.0428%" height="15" fill="rgb(225,111,53)" fg:x="2329" fg:w="2"/><text x="50.0895%" y="239.50"></text></g><g><title>muehlespiel`muehlespiel::producer::complete_search::mark_lost (2 samples, 0.04%)</title><rect x="49.8823%" y="229" width="0.0428%" height="15" fill="rgb(238,160,17)" fg:x="2331" fg:w="2"/><text x="50.1323%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memset (7 samples, 0.15%)</title><rect x="66.8093%" y="213" width="0.1498%" height="15" fill="rgb(214,148,48)" fg:x="3122" fg:w="7"/><text x="67.0593%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="66.9591%" y="213" width="0.0214%" height="15" fill="rgb(232,36,49)" fg:x="3129" fg:w="1"/><text x="67.2091%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (2 samples, 0.04%)</title><rect x="66.9805%" y="213" width="0.0428%" height="15" fill="rgb(209,103,24)" fg:x="3130" fg:w="2"/><text x="67.2305%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (90 samples, 1.93%)</title><rect x="67.0233%" y="213" width="1.9260%" height="15" fill="rgb(229,88,8)" fg:x="3132" fg:w="90"/><text x="67.2733%" y="223.50">l..</text></g><g><title>libsystem_malloc.dylib`free (7 samples, 0.15%)</title><rect x="68.9493%" y="213" width="0.1498%" height="15" fill="rgb(213,181,19)" fg:x="3222" fg:w="7"/><text x="69.1993%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (5 samples, 0.11%)</title><rect x="73.0366%" y="197" width="0.1070%" height="15" fill="rgb(254,191,54)" fg:x="3413" fg:w="5"/><text x="73.2866%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (11 samples, 0.24%)</title><rect x="73.4860%" y="181" width="0.2354%" height="15" fill="rgb(241,83,37)" fg:x="3434" fg:w="11"/><text x="73.7360%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (217 samples, 4.64%)</title><rect x="69.0991%" y="213" width="4.6437%" height="15" fill="rgb(233,36,39)" fg:x="3229" fg:w="217"/><text x="69.3491%" y="223.50">libsy..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (28 samples, 0.60%)</title><rect x="73.1436%" y="197" width="0.5992%" height="15" fill="rgb(226,3,54)" fg:x="3418" fg:w="28"/><text x="73.3936%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.02%)</title><rect x="73.7214%" y="181" width="0.0214%" height="15" fill="rgb(245,192,40)" fg:x="3445" fg:w="1"/><text x="73.9714%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (2 samples, 0.04%)</title><rect x="73.8498%" y="197" width="0.0428%" height="15" fill="rgb(238,167,29)" fg:x="3451" fg:w="2"/><text x="74.0998%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (6 samples, 0.13%)</title><rect x="73.8926%" y="197" width="0.1284%" height="15" fill="rgb(232,182,51)" fg:x="3453" fg:w="6"/><text x="74.1426%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (47 samples, 1.01%)</title><rect x="73.7428%" y="213" width="1.0058%" height="15" fill="rgb(231,60,39)" fg:x="3446" fg:w="47"/><text x="73.9928%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (34 samples, 0.73%)</title><rect x="74.0210%" y="197" width="0.7276%" height="15" fill="rgb(208,69,12)" fg:x="3459" fg:w="34"/><text x="74.2710%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (25 samples, 0.53%)</title><rect x="74.2136%" y="181" width="0.5350%" height="15" fill="rgb(235,93,37)" fg:x="3468" fg:w="25"/><text x="74.4636%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (5 samples, 0.11%)</title><rect x="74.6416%" y="165" width="0.1070%" height="15" fill="rgb(213,116,39)" fg:x="3488" fg:w="5"/><text x="74.8916%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3 samples, 0.06%)</title><rect x="74.7486%" y="213" width="0.0642%" height="15" fill="rgb(222,207,29)" fg:x="3493" fg:w="3"/><text x="74.9986%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="74.8128%" y="213" width="0.0214%" height="15" fill="rgb(206,96,30)" fg:x="3496" fg:w="1"/><text x="75.0628%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (39 samples, 0.83%)</title><rect x="74.8342%" y="213" width="0.8346%" height="15" fill="rgb(218,138,4)" fg:x="3497" fg:w="39"/><text x="75.0842%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memset (1 samples, 0.02%)</title><rect x="77.2095%" y="181" width="0.0214%" height="15" fill="rgb(250,191,14)" fg:x="3608" fg:w="1"/><text x="77.4595%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (2 samples, 0.04%)</title><rect x="77.2309%" y="181" width="0.0428%" height="15" fill="rgb(239,60,40)" fg:x="3609" fg:w="2"/><text x="77.4809%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (11 samples, 0.24%)</title><rect x="77.2737%" y="181" width="0.2354%" height="15" fill="rgb(206,27,48)" fg:x="3611" fg:w="11"/><text x="77.5237%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.04%)</title><rect x="77.4663%" y="165" width="0.0428%" height="15" fill="rgb(225,35,8)" fg:x="3620" fg:w="2"/><text x="77.7163%" y="175.50"></text></g><g><title> 3] as muehlespiel::datastructures::game_board::UsefulGameBoard&gt;::from_pieces (95 samples, 2.03%)</title><rect x="75.6687%" y="197" width="2.0330%" height="15" fill="rgb(250,213,24)" fg:x="3536" fg:w="95"/><text x="75.9187%" y="207.50"> ..</text></g><g><title>libsystem_platform.dylib`_platform_memset (9 samples, 0.19%)</title><rect x="77.5091%" y="181" width="0.1926%" height="15" fill="rgb(247,123,22)" fg:x="3622" fg:w="9"/><text x="77.7591%" y="191.50"></text></g><g><title>muehlespiel`&lt;[u16 (109 samples, 2.33%)</title><rect x="75.6687%" y="213" width="2.3325%" height="15" fill="rgb(231,138,38)" fg:x="3536" fg:w="109"/><text x="75.9187%" y="223.50">m..</text></g><g><title> 3] as muehlespiel::datastructures::game_board::UsefulGameBoard&gt;::get_representative (14 samples, 0.30%)</title><rect x="77.7017%" y="197" width="0.2996%" height="15" fill="rgb(231,145,46)" fg:x="3631" fg:w="14"/><text x="77.9517%" y="207.50"></text></g><g><title>muehlespiel`&lt;itertools::combinations::Combinations&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.24%)</title><rect x="78.0013%" y="213" width="0.2354%" height="15" fill="rgb(251,118,11)" fg:x="3645" fg:w="11"/><text x="78.2513%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.04%)</title><rect x="78.7717%" y="197" width="0.0428%" height="15" fill="rgb(217,147,25)" fg:x="3681" fg:w="2"/><text x="79.0217%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.02%)</title><rect x="78.8145%" y="197" width="0.0214%" height="15" fill="rgb(247,81,37)" fg:x="3683" fg:w="1"/><text x="79.0645%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.06%)</title><rect x="78.8359%" y="197" width="0.0642%" height="15" fill="rgb(209,12,38)" fg:x="3684" fg:w="3"/><text x="79.0859%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (3 samples, 0.06%)</title><rect x="78.9001%" y="197" width="0.0642%" height="15" fill="rgb(227,1,9)" fg:x="3687" fg:w="3"/><text x="79.1501%" y="207.50"></text></g><g><title>muehlespiel`&lt;muehlespiel::datastructures::direction::DirectionIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.04%)</title><rect x="78.9643%" y="197" width="0.0428%" height="15" fill="rgb(248,47,43)" fg:x="3690" fg:w="2"/><text x="79.2143%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.02%)</title><rect x="79.3281%" y="181" width="0.0214%" height="15" fill="rgb(221,10,30)" fg:x="3707" fg:w="1"/><text x="79.5781%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="79.3495%" y="181" width="0.0214%" height="15" fill="rgb(210,229,1)" fg:x="3708" fg:w="1"/><text x="79.5995%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.06%)</title><rect x="79.3709%" y="181" width="0.0642%" height="15" fill="rgb(222,148,37)" fg:x="3709" fg:w="3"/><text x="79.6209%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.02%)</title><rect x="79.4137%" y="165" width="0.0214%" height="15" fill="rgb(234,67,33)" fg:x="3711" fg:w="1"/><text x="79.6637%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.02%)</title><rect x="79.4565%" y="165" width="0.0214%" height="15" fill="rgb(247,98,35)" fg:x="3713" fg:w="1"/><text x="79.7065%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.06%)</title><rect x="79.4351%" y="181" width="0.0642%" height="15" fill="rgb(247,138,52)" fg:x="3712" fg:w="3"/><text x="79.6851%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="79.4779%" y="165" width="0.0214%" height="15" fill="rgb(213,79,30)" fg:x="3714" fg:w="1"/><text x="79.7279%" y="175.50"></text></g><g><title>muehlespiel`&lt;muehlespiel::datastructures::direction::DirectionIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.04%)</title><rect x="79.4993%" y="181" width="0.0428%" height="15" fill="rgb(246,177,23)" fg:x="3715" fg:w="2"/><text x="79.7493%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="79.6490%" y="165" width="0.0214%" height="15" fill="rgb(230,62,27)" fg:x="3722" fg:w="1"/><text x="79.8990%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.04%)</title><rect x="79.6704%" y="165" width="0.0428%" height="15" fill="rgb(216,154,8)" fg:x="3723" fg:w="2"/><text x="79.9204%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.04%)</title><rect x="79.7132%" y="165" width="0.0428%" height="15" fill="rgb(244,35,45)" fg:x="3725" fg:w="2"/><text x="79.9632%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.04%)</title><rect x="79.7132%" y="149" width="0.0428%" height="15" fill="rgb(251,115,12)" fg:x="3725" fg:w="2"/><text x="79.9632%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.02%)</title><rect x="79.7346%" y="133" width="0.0214%" height="15" fill="rgb(240,54,50)" fg:x="3726" fg:w="1"/><text x="79.9846%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.02%)</title><rect x="79.7560%" y="165" width="0.0214%" height="15" fill="rgb(233,84,52)" fg:x="3727" fg:w="1"/><text x="80.0060%" y="175.50"></text></g><g><title>muehlespiel`&lt;muehlespiel::datastructures::direction::DirectionIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="79.7774%" y="165" width="0.0214%" height="15" fill="rgb(207,117,47)" fg:x="3728" fg:w="1"/><text x="80.0274%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="79.8202%" y="149" width="0.0214%" height="15" fill="rgb(249,43,39)" fg:x="3730" fg:w="1"/><text x="80.0702%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="79.8416%" y="149" width="0.0214%" height="15" fill="rgb(209,38,44)" fg:x="3731" fg:w="1"/><text x="80.0916%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (7 samples, 0.15%)</title><rect x="79.8630%" y="149" width="0.1498%" height="15" fill="rgb(236,212,23)" fg:x="3732" fg:w="7"/><text x="80.1130%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.04%)</title><rect x="79.9700%" y="133" width="0.0428%" height="15" fill="rgb(242,79,21)" fg:x="3737" fg:w="2"/><text x="80.2200%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.02%)</title><rect x="79.9914%" y="117" width="0.0214%" height="15" fill="rgb(211,96,35)" fg:x="3738" fg:w="1"/><text x="80.2414%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (1 samples, 0.02%)</title><rect x="80.0342%" y="133" width="0.0214%" height="15" fill="rgb(253,215,40)" fg:x="3740" fg:w="1"/><text x="80.2842%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.02%)</title><rect x="80.0556%" y="133" width="0.0214%" height="15" fill="rgb(211,81,21)" fg:x="3741" fg:w="1"/><text x="80.3056%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (5 samples, 0.11%)</title><rect x="80.0128%" y="149" width="0.1070%" height="15" fill="rgb(208,190,38)" fg:x="3739" fg:w="5"/><text x="80.2628%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.04%)</title><rect x="80.0770%" y="133" width="0.0428%" height="15" fill="rgb(235,213,38)" fg:x="3742" fg:w="2"/><text x="80.3270%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.02%)</title><rect x="80.0984%" y="117" width="0.0214%" height="15" fill="rgb(237,122,38)" fg:x="3743" fg:w="1"/><text x="80.3484%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="80.1198%" y="149" width="0.0214%" height="15" fill="rgb(244,218,35)" fg:x="3744" fg:w="1"/><text x="80.3698%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.02%)</title><rect x="80.1412%" y="149" width="0.0214%" height="15" fill="rgb(240,68,47)" fg:x="3745" fg:w="1"/><text x="80.3912%" y="159.50"></text></g><g><title>muehlespiel`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="80.1626%" y="149" width="0.0214%" height="15" fill="rgb(210,16,53)" fg:x="3746" fg:w="1"/><text x="80.4126%" y="159.50"></text></g><g><title>muehlespiel`&lt;muehlespiel::datastructures::direction::DirectionIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="80.1840%" y="149" width="0.0214%" height="15" fill="rgb(235,124,12)" fg:x="3747" fg:w="1"/><text x="80.4340%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.04%)</title><rect x="80.2910%" y="133" width="0.0428%" height="15" fill="rgb(224,169,11)" fg:x="3752" fg:w="2"/><text x="80.5410%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.02%)</title><rect x="80.3124%" y="117" width="0.0214%" height="15" fill="rgb(250,166,2)" fg:x="3753" fg:w="1"/><text x="80.5624%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.02%)</title><rect x="80.3124%" y="101" width="0.0214%" height="15" fill="rgb(242,216,29)" fg:x="3753" fg:w="1"/><text x="80.5624%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.02%)</title><rect x="80.3338%" y="133" width="0.0214%" height="15" fill="rgb(230,116,27)" fg:x="3754" fg:w="1"/><text x="80.5838%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="80.5050%" y="85" width="0.0214%" height="15" fill="rgb(228,99,48)" fg:x="3762" fg:w="1"/><text x="80.7550%" y="95.50"></text></g><g><title>muehlespiel`&lt;muehlespiel::iterators::neighbours_iterator::NeighboursIterator as core::iter::traits::iterator::Iterator&gt;::next (47 samples, 1.01%)</title><rect x="79.5421%" y="181" width="1.0058%" height="15" fill="rgb(253,11,6)" fg:x="3717" fg:w="47"/><text x="79.7921%" y="191.50"></text></g><g><title>muehlespiel`&lt;muehlespiel::iterators::neighbours_iterator::NeighboursIterator as core::iter::traits::iterator::Iterator&gt;::next (35 samples, 0.75%)</title><rect x="79.7988%" y="165" width="0.7490%" height="15" fill="rgb(247,143,39)" fg:x="3729" fg:w="35"/><text x="80.0488%" y="175.50"></text></g><g><title>muehlespiel`&lt;muehlespiel::iterators::neighbours_iterator::NeighboursIterator as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.34%)</title><rect x="80.2054%" y="149" width="0.3424%" height="15" fill="rgb(236,97,10)" fg:x="3748" fg:w="16"/><text x="80.4554%" y="159.50"></text></g><g><title>muehlespiel`&lt;muehlespiel::iterators::neighbours_iterator::NeighboursIterator as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.19%)</title><rect x="80.3552%" y="133" width="0.1926%" height="15" fill="rgb(233,208,19)" fg:x="3755" fg:w="9"/><text x="80.6052%" y="143.50"></text></g><g><title>muehlespiel`&lt;muehlespiel::iterators::neighbours_iterator::NeighboursIterator as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.09%)</title><rect x="80.4622%" y="117" width="0.0856%" height="15" fill="rgb(216,164,2)" fg:x="3760" fg:w="4"/><text x="80.7122%" y="127.50"></text></g><g><title>muehlespiel`&lt;muehlespiel::iterators::neighbours_iterator::NeighboursIterator as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.09%)</title><rect x="80.4622%" y="101" width="0.0856%" height="15" fill="rgb(220,129,5)" fg:x="3760" fg:w="4"/><text x="80.7122%" y="111.50"></text></g><g><title>muehlespiel`&lt;muehlespiel::iterators::neighbours_iterator::NeighboursIterator as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="80.5264%" y="85" width="0.0214%" height="15" fill="rgb(242,17,10)" fg:x="3763" fg:w="1"/><text x="80.7764%" y="95.50"></text></g><g><title>muehlespiel`&lt;muehlespiel::iterators::neighbours_iterator::NeighboursIterator as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="80.5264%" y="69" width="0.0214%" height="15" fill="rgb(242,107,0)" fg:x="3763" fg:w="1"/><text x="80.7764%" y="79.50"></text></g><g><title>muehlespiel`DYLD-STUB$$free (1 samples, 0.02%)</title><rect x="80.5478%" y="181" width="0.0214%" height="15" fill="rgb(251,28,31)" fg:x="3764" fg:w="1"/><text x="80.7978%" y="191.50"></text></g><g><title>muehlespiel`&lt;muehlespiel::iterators::neighbours_iterator::NeighboursIterator as core::iter::traits::iterator::Iterator&gt;::next (74 samples, 1.58%)</title><rect x="79.0071%" y="197" width="1.5836%" height="15" fill="rgb(233,223,10)" fg:x="3692" fg:w="74"/><text x="79.2571%" y="207.50"></text></g><g><title>muehlespiel`core::ptr::drop_in_place&lt;core::ops::range::RangeInclusive&lt;u8&gt;&gt; (1 samples, 0.02%)</title><rect x="80.5692%" y="181" width="0.0214%" height="15" fill="rgb(215,21,27)" fg:x="3765" fg:w="1"/><text x="80.8192%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.02%)</title><rect x="80.8474%" y="181" width="0.0214%" height="15" fill="rgb(232,23,21)" fg:x="3778" fg:w="1"/><text x="81.0974%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (4 samples, 0.09%)</title><rect x="80.8688%" y="181" width="0.0856%" height="15" fill="rgb(244,5,23)" fg:x="3779" fg:w="4"/><text x="81.1188%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.04%)</title><rect x="80.9116%" y="165" width="0.0428%" height="15" fill="rgb(226,81,46)" fg:x="3781" fg:w="2"/><text x="81.1616%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.02%)</title><rect x="80.9330%" y="149" width="0.0214%" height="15" fill="rgb(247,70,30)" fg:x="3782" fg:w="1"/><text x="81.1830%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (1 samples, 0.02%)</title><rect x="80.9544%" y="165" width="0.0214%" height="15" fill="rgb(212,68,19)" fg:x="3783" fg:w="1"/><text x="81.2044%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.02%)</title><rect x="80.9758%" y="149" width="0.0214%" height="15" fill="rgb(240,187,13)" fg:x="3784" fg:w="1"/><text x="81.2258%" y="159.50"></text></g><g><title>muehlespiel`&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (133 samples, 2.85%)</title><rect x="78.2367%" y="213" width="2.8461%" height="15" fill="rgb(223,113,26)" fg:x="3656" fg:w="133"/><text x="78.4867%" y="223.50">mu..</text></g><g><title>muehlespiel`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (23 samples, 0.49%)</title><rect x="80.5906%" y="197" width="0.4922%" height="15" fill="rgb(206,192,2)" fg:x="3766" fg:w="23"/><text x="80.8406%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (6 samples, 0.13%)</title><rect x="80.9544%" y="181" width="0.1284%" height="15" fill="rgb(241,108,4)" fg:x="3783" fg:w="6"/><text x="81.2044%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (5 samples, 0.11%)</title><rect x="80.9758%" y="165" width="0.1070%" height="15" fill="rgb(247,173,49)" fg:x="3784" fg:w="5"/><text x="81.2258%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (4 samples, 0.09%)</title><rect x="80.9972%" y="149" width="0.0856%" height="15" fill="rgb(224,114,35)" fg:x="3785" fg:w="4"/><text x="81.2472%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.02%)</title><rect x="81.0614%" y="133" width="0.0214%" height="15" fill="rgb(245,159,27)" fg:x="3788" fg:w="1"/><text x="81.3114%" y="143.50"></text></g><g><title>muehlespiel`&lt;muehlespiel::iterators::board_equivalence_class_iterator::BoardEquivalenceClassIterator as core::iter::traits::iterator::Iterator&gt;::next (406 samples, 8.69%)</title><rect x="81.0828%" y="213" width="8.6882%" height="15" fill="rgb(245,172,44)" fg:x="3789" fg:w="406"/><text x="81.3328%" y="223.50">muehlespiel`..</text></g><g><title>muehlespiel`&lt;muehlespiel::iterators::n_range_locations_iterator::NLocationsIterator as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.11%)</title><rect x="89.7710%" y="213" width="0.1070%" height="15" fill="rgb(236,23,11)" fg:x="4195" fg:w="5"/><text x="90.0210%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (19 samples, 0.41%)</title><rect x="89.9636%" y="197" width="0.4066%" height="15" fill="rgb(205,117,38)" fg:x="4204" fg:w="19"/><text x="90.2136%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (5 samples, 0.11%)</title><rect x="90.3702%" y="197" width="0.1070%" height="15" fill="rgb(237,72,25)" fg:x="4223" fg:w="5"/><text x="90.6202%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (19 samples, 0.41%)</title><rect x="93.3233%" y="165" width="0.4066%" height="15" fill="rgb(244,70,9)" fg:x="4361" fg:w="19"/><text x="93.5733%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (73 samples, 1.56%)</title><rect x="92.9810%" y="181" width="1.5622%" height="15" fill="rgb(217,125,39)" fg:x="4345" fg:w="73"/><text x="93.2310%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (38 samples, 0.81%)</title><rect x="93.7299%" y="165" width="0.8132%" height="15" fill="rgb(235,36,10)" fg:x="4380" fg:w="38"/><text x="93.9799%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (35 samples, 0.75%)</title><rect x="94.5431%" y="181" width="0.7490%" height="15" fill="rgb(251,123,47)" fg:x="4418" fg:w="35"/><text x="94.7931%" y="191.50"></text></g><g><title>muehlespiel`&lt;itertools::combinations::Combinations&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (226 samples, 4.84%)</title><rect x="90.4772%" y="197" width="4.8363%" height="15" fill="rgb(221,13,13)" fg:x="4228" fg:w="226"/><text x="90.7272%" y="207.50">muehle..</text></g><g><title>muehlespiel`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.02%)</title><rect x="95.2921%" y="181" width="0.0214%" height="15" fill="rgb(238,131,9)" fg:x="4453" fg:w="1"/><text x="95.5421%" y="191.50"></text></g><g><title>muehlespiel`alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="95.2921%" y="165" width="0.0214%" height="15" fill="rgb(211,50,8)" fg:x="4453" fg:w="1"/><text x="95.5421%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.02%)</title><rect x="95.2921%" y="149" width="0.0214%" height="15" fill="rgb(245,182,24)" fg:x="4453" fg:w="1"/><text x="95.5421%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.02%)</title><rect x="95.2921%" y="133" width="0.0214%" height="15" fill="rgb(242,14,37)" fg:x="4453" fg:w="1"/><text x="95.5421%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.02%)</title><rect x="95.2921%" y="117" width="0.0214%" height="15" fill="rgb(246,228,12)" fg:x="4453" fg:w="1"/><text x="95.5421%" y="127.50"></text></g><g><title>muehlespiel`DYLD-STUB$$malloc (3 samples, 0.06%)</title><rect x="95.3135%" y="197" width="0.0642%" height="15" fill="rgb(213,55,15)" fg:x="4454" fg:w="3"/><text x="95.5635%" y="207.50"></text></g><g><title>muehlespiel`core::ptr::drop_in_place&lt;itertools::combinations::Combinations&lt;alloc::vec::into_iter::IntoIter&lt;u8&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="95.3777%" y="197" width="0.0214%" height="15" fill="rgb(209,9,3)" fg:x="4457" fg:w="1"/><text x="95.6277%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.02%)</title><rect x="95.3777%" y="181" width="0.0214%" height="15" fill="rgb(230,59,30)" fg:x="4457" fg:w="1"/><text x="95.6277%" y="191.50"></text></g><g><title>muehlespiel`&lt;muehlespiel::iterators::n_range_locations_iterator::NRangeLocationsIterator as core::iter::traits::iterator::Iterator&gt;::next (259 samples, 5.54%)</title><rect x="89.8780%" y="213" width="5.5425%" height="15" fill="rgb(209,121,21)" fg:x="4200" fg:w="259"/><text x="90.1280%" y="223.50">muehles..</text></g><g><title>muehlespiel`muehlespiel::iterators::n_range_locations_iterator::NLocationsIterator::new (1 samples, 0.02%)</title><rect x="95.3991%" y="197" width="0.0214%" height="15" fill="rgb(220,109,13)" fg:x="4458" fg:w="1"/><text x="95.6491%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="95.3991%" y="181" width="0.0214%" height="15" fill="rgb(232,18,1)" fg:x="4458" fg:w="1"/><text x="95.6491%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="95.3991%" y="165" width="0.0214%" height="15" fill="rgb(215,41,42)" fg:x="4458" fg:w="1"/><text x="95.6491%" y="175.50"></text></g><g><title>muehlespiel`&lt;muehlespiel::iterators::neighbours_iterator::NeighboursIterator as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="95.4205%" y="213" width="0.0214%" height="15" fill="rgb(224,123,36)" fg:x="4459" fg:w="1"/><text x="95.6705%" y="223.50"></text></g><g><title>muehlespiel`DYLD-STUB$$free (2 samples, 0.04%)</title><rect x="95.4419%" y="213" width="0.0428%" height="15" fill="rgb(240,125,3)" fg:x="4460" fg:w="2"/><text x="95.6919%" y="223.50"></text></g><g><title>muehlespiel`DYLD-STUB$$malloc (1 samples, 0.02%)</title><rect x="95.4847%" y="213" width="0.0214%" height="15" fill="rgb(205,98,50)" fg:x="4462" fg:w="1"/><text x="95.7347%" y="223.50"></text></g><g><title>muehlespiel`DYLD-STUB$$realloc (1 samples, 0.02%)</title><rect x="95.5061%" y="213" width="0.0214%" height="15" fill="rgb(205,185,37)" fg:x="4463" fg:w="1"/><text x="95.7561%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.02%)</title><rect x="95.5275%" y="133" width="0.0214%" height="15" fill="rgb(238,207,15)" fg:x="4464" fg:w="1"/><text x="95.7775%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="95.5489%" y="133" width="0.0214%" height="15" fill="rgb(213,199,42)" fg:x="4465" fg:w="1"/><text x="95.7989%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="95.5489%" y="117" width="0.0214%" height="15" fill="rgb(235,201,11)" fg:x="4465" fg:w="1"/><text x="95.7989%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.02%)</title><rect x="95.5489%" y="101" width="0.0214%" height="15" fill="rgb(207,46,11)" fg:x="4465" fg:w="1"/><text x="95.7989%" y="111.50"></text></g><g><title>muehlespiel`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.09%)</title><rect x="95.5275%" y="213" width="0.0856%" height="15" fill="rgb(241,35,35)" fg:x="4464" fg:w="4"/><text x="95.7775%" y="223.50"></text></g><g><title>muehlespiel`alloc::raw_vec::finish_grow (4 samples, 0.09%)</title><rect x="95.5275%" y="197" width="0.0856%" height="15" fill="rgb(243,32,47)" fg:x="4464" fg:w="4"/><text x="95.7775%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (4 samples, 0.09%)</title><rect x="95.5275%" y="181" width="0.0856%" height="15" fill="rgb(247,202,23)" fg:x="4464" fg:w="4"/><text x="95.7775%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (4 samples, 0.09%)</title><rect x="95.5275%" y="165" width="0.0856%" height="15" fill="rgb(219,102,11)" fg:x="4464" fg:w="4"/><text x="95.7775%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (4 samples, 0.09%)</title><rect x="95.5275%" y="149" width="0.0856%" height="15" fill="rgb(243,110,44)" fg:x="4464" fg:w="4"/><text x="95.7775%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (2 samples, 0.04%)</title><rect x="95.5703%" y="133" width="0.0428%" height="15" fill="rgb(222,74,54)" fg:x="4466" fg:w="2"/><text x="95.8203%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (2 samples, 0.04%)</title><rect x="95.5703%" y="117" width="0.0428%" height="15" fill="rgb(216,99,12)" fg:x="4466" fg:w="2"/><text x="95.8203%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (6 samples, 0.13%)</title><rect x="95.6131%" y="181" width="0.1284%" height="15" fill="rgb(226,22,26)" fg:x="4468" fg:w="6"/><text x="95.8631%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (2 samples, 0.04%)</title><rect x="95.6987%" y="165" width="0.0428%" height="15" fill="rgb(217,163,10)" fg:x="4472" fg:w="2"/><text x="95.9487%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (2 samples, 0.04%)</title><rect x="95.6987%" y="149" width="0.0428%" height="15" fill="rgb(213,25,53)" fg:x="4472" fg:w="2"/><text x="95.9487%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (2 samples, 0.04%)</title><rect x="95.6987%" y="133" width="0.0428%" height="15" fill="rgb(252,105,26)" fg:x="4472" fg:w="2"/><text x="95.9487%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (2 samples, 0.04%)</title><rect x="95.7415%" y="181" width="0.0428%" height="15" fill="rgb(220,39,43)" fg:x="4474" fg:w="2"/><text x="95.9915%" y="191.50"></text></g><g><title>muehlespiel`alloc::raw_vec::finish_grow (22 samples, 0.47%)</title><rect x="95.6131%" y="213" width="0.4708%" height="15" fill="rgb(229,68,48)" fg:x="4468" fg:w="22"/><text x="95.8631%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (22 samples, 0.47%)</title><rect x="95.6131%" y="197" width="0.4708%" height="15" fill="rgb(252,8,32)" fg:x="4468" fg:w="22"/><text x="95.8631%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (14 samples, 0.30%)</title><rect x="95.7843%" y="181" width="0.2996%" height="15" fill="rgb(223,20,43)" fg:x="4476" fg:w="14"/><text x="96.0343%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (14 samples, 0.30%)</title><rect x="95.7843%" y="165" width="0.2996%" height="15" fill="rgb(229,81,49)" fg:x="4476" fg:w="14"/><text x="96.0343%" y="175.50"></text></g><g><title>muehlespiel`core::iter::range::_&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::next (1 samples, 0.02%)</title><rect x="96.0839%" y="213" width="0.0214%" height="15" fill="rgb(236,28,36)" fg:x="4490" fg:w="1"/><text x="96.3339%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.04%)</title><rect x="96.1053%" y="197" width="0.0428%" height="15" fill="rgb(249,185,26)" fg:x="4491" fg:w="2"/><text x="96.3553%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.04%)</title><rect x="96.1053%" y="181" width="0.0428%" height="15" fill="rgb(249,174,33)" fg:x="4491" fg:w="2"/><text x="96.3553%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.02%)</title><rect x="96.1267%" y="165" width="0.0214%" height="15" fill="rgb(233,201,37)" fg:x="4492" fg:w="1"/><text x="96.3767%" y="175.50"></text></g><g><title>muehlespiel`core::ptr::drop_in_place&lt;itertools::combinations::Combinations&lt;alloc::vec::into_iter::IntoIter&lt;u8&gt;&gt;&gt; (2 samples, 0.04%)</title><rect x="96.1481%" y="197" width="0.0428%" height="15" fill="rgb(221,78,26)" fg:x="4493" fg:w="2"/><text x="96.3981%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.02%)</title><rect x="96.1695%" y="181" width="0.0214%" height="15" fill="rgb(250,127,30)" fg:x="4494" fg:w="1"/><text x="96.4195%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.02%)</title><rect x="96.1695%" y="165" width="0.0214%" height="15" fill="rgb(230,49,44)" fg:x="4494" fg:w="1"/><text x="96.4195%" y="175.50"></text></g><g><title>muehlespiel`core::ptr::drop_in_place&lt;muehlespiel::iterators::n_range_locations_iterator::NRangeLocationsIterator&gt; (5 samples, 0.11%)</title><rect x="96.1053%" y="213" width="0.1070%" height="15" fill="rgb(229,67,23)" fg:x="4491" fg:w="5"/><text x="96.3553%" y="223.50"></text></g><g><title>muehlespiel`core::ptr::drop_in_place&lt;muehlespiel::iterators::n_range_locations_iterator::NLocationsIterator&gt; (1 samples, 0.02%)</title><rect x="96.1909%" y="197" width="0.0214%" height="15" fill="rgb(249,83,47)" fg:x="4495" fg:w="1"/><text x="96.4409%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.02%)</title><rect x="96.1909%" y="181" width="0.0214%" height="15" fill="rgb(215,43,3)" fg:x="4495" fg:w="1"/><text x="96.4409%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.02%)</title><rect x="96.1909%" y="165" width="0.0214%" height="15" fill="rgb(238,154,13)" fg:x="4495" fg:w="1"/><text x="96.4409%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (3 samples, 0.06%)</title><rect x="96.2337%" y="197" width="0.0642%" height="15" fill="rgb(219,56,2)" fg:x="4497" fg:w="3"/><text x="96.4837%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (8 samples, 0.17%)</title><rect x="96.2979%" y="197" width="0.1712%" height="15" fill="rgb(233,0,4)" fg:x="4500" fg:w="8"/><text x="96.5479%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (6 samples, 0.13%)</title><rect x="96.3407%" y="181" width="0.1284%" height="15" fill="rgb(235,30,7)" fg:x="4502" fg:w="6"/><text x="96.5907%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (3 samples, 0.06%)</title><rect x="96.4049%" y="165" width="0.0642%" height="15" fill="rgb(250,79,13)" fg:x="4505" fg:w="3"/><text x="96.6549%" y="175.50"></text></g><g><title>muehlespiel`core::ptr::drop_in_place&lt;muehlespiel::iterators::neighbours_iterator::NeighboursIterator&gt; (14 samples, 0.30%)</title><rect x="96.2123%" y="213" width="0.2996%" height="15" fill="rgb(211,146,34)" fg:x="4496" fg:w="14"/><text x="96.4623%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.04%)</title><rect x="96.4691%" y="197" width="0.0428%" height="15" fill="rgb(228,22,38)" fg:x="4508" fg:w="2"/><text x="96.7191%" y="207.50"></text></g><g><title>muehlespiel`core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;[u16 (3 samples, 0.06%)</title><rect x="96.5119%" y="213" width="0.0642%" height="15" fill="rgb(235,168,5)" fg:x="4510" fg:w="3"/><text x="96.7619%" y="223.50"></text></g><g><title> 3],(alloc::vec::Vec&lt;u8&gt;,alloc::vec::Vec&lt;u8&gt;),core::hash::BuildHasherDefault&lt;fnv::FnvHasher&gt;&gt;&gt; (3 samples, 0.06%)</title><rect x="96.5119%" y="197" width="0.0642%" height="15" fill="rgb(221,155,16)" fg:x="4510" fg:w="3"/><text x="96.7619%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.06%)</title><rect x="96.5119%" y="181" width="0.0642%" height="15" fill="rgb(215,215,53)" fg:x="4510" fg:w="3"/><text x="96.7619%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3 samples, 0.06%)</title><rect x="96.5119%" y="165" width="0.0642%" height="15" fill="rgb(223,4,10)" fg:x="4510" fg:w="3"/><text x="96.7619%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.02%)</title><rect x="96.5547%" y="149" width="0.0214%" height="15" fill="rgb(234,103,6)" fg:x="4512" fg:w="1"/><text x="96.8047%" y="159.50"></text></g><g><title>muehlespiel`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (6 samples, 0.13%)</title><rect x="96.5761%" y="213" width="0.1284%" height="15" fill="rgb(227,97,0)" fg:x="4513" fg:w="6"/><text x="96.8261%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (2 samples, 0.04%)</title><rect x="99.2510%" y="197" width="0.0428%" height="15" fill="rgb(234,150,53)" fg:x="4638" fg:w="2"/><text x="99.5010%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.04%)</title><rect x="99.2510%" y="181" width="0.0428%" height="15" fill="rgb(228,201,54)" fg:x="4638" fg:w="2"/><text x="99.5010%" y="191.50"></text></g><g><title>muehlespiel`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (122 samples, 2.61%)</title><rect x="96.7045%" y="213" width="2.6107%" height="15" fill="rgb(222,22,37)" fg:x="4519" fg:w="122"/><text x="96.9545%" y="223.50">mu..</text></g><g><title>libsystem_malloc.dylib`free_medium (1 samples, 0.02%)</title><rect x="99.2938%" y="197" width="0.0214%" height="15" fill="rgb(237,53,32)" fg:x="4640" fg:w="1"/><text x="99.5438%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.02%)</title><rect x="99.2938%" y="181" width="0.0214%" height="15" fill="rgb(233,25,53)" fg:x="4640" fg:w="1"/><text x="99.5438%" y="191.50"></text></g><g><title>muehlespiel`muehlespiel::iterators::n_range_locations_iterator::NRangeLocationsIterator::new (2 samples, 0.04%)</title><rect x="99.3152%" y="213" width="0.0428%" height="15" fill="rgb(210,40,34)" fg:x="4641" fg:w="2"/><text x="99.5652%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="99.3366%" y="197" width="0.0214%" height="15" fill="rgb(241,220,44)" fg:x="4642" fg:w="1"/><text x="99.5866%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="99.3366%" y="181" width="0.0214%" height="15" fill="rgb(235,28,35)" fg:x="4642" fg:w="1"/><text x="99.5866%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (1 samples, 0.02%)</title><rect x="99.4222%" y="181" width="0.0214%" height="15" fill="rgb(210,56,17)" fg:x="4646" fg:w="1"/><text x="99.6722%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2 samples, 0.04%)</title><rect x="99.4436%" y="181" width="0.0428%" height="15" fill="rgb(224,130,29)" fg:x="4647" fg:w="2"/><text x="99.6936%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (2 samples, 0.04%)</title><rect x="99.5078%" y="165" width="0.0428%" height="15" fill="rgb(235,212,8)" fg:x="4650" fg:w="2"/><text x="99.7578%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.02%)</title><rect x="99.5506%" y="165" width="0.0214%" height="15" fill="rgb(223,33,50)" fg:x="4652" fg:w="1"/><text x="99.8006%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (15 samples, 0.32%)</title><rect x="99.3580%" y="197" width="0.3210%" height="15" fill="rgb(219,149,13)" fg:x="4643" fg:w="15"/><text x="99.6080%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (9 samples, 0.19%)</title><rect x="99.4864%" y="181" width="0.1926%" height="15" fill="rgb(250,156,29)" fg:x="4649" fg:w="9"/><text x="99.7364%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (5 samples, 0.11%)</title><rect x="99.5720%" y="165" width="0.1070%" height="15" fill="rgb(216,193,19)" fg:x="4653" fg:w="5"/><text x="99.8220%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.02%)</title><rect x="99.6576%" y="149" width="0.0214%" height="15" fill="rgb(216,135,14)" fg:x="4657" fg:w="1"/><text x="99.9076%" y="159.50"></text></g><g><title>muehlespiel`muehlespiel::iterators::neighbours_iterator::NeighboursIterator::new (16 samples, 0.34%)</title><rect x="99.3580%" y="213" width="0.3424%" height="15" fill="rgb(241,47,5)" fg:x="4643" fg:w="16"/><text x="99.6080%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="99.6790%" y="197" width="0.0214%" height="15" fill="rgb(233,42,35)" fg:x="4658" fg:w="1"/><text x="99.9290%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.02%)</title><rect x="99.8288%" y="197" width="0.0214%" height="15" fill="rgb(231,13,6)" fg:x="4665" fg:w="1"/><text x="100.0788%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.02%)</title><rect x="99.8502%" y="197" width="0.0214%" height="15" fill="rgb(207,181,40)" fg:x="4666" fg:w="1"/><text x="100.1002%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.02%)</title><rect x="99.8716%" y="85" width="0.0214%" height="15" fill="rgb(254,173,49)" fg:x="4667" fg:w="1"/><text x="100.1216%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.02%)</title><rect x="99.8716%" y="69" width="0.0214%" height="15" fill="rgb(221,1,38)" fg:x="4667" fg:w="1"/><text x="100.1216%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.02%)</title><rect x="99.8716%" y="53" width="0.0214%" height="15" fill="rgb(206,124,46)" fg:x="4667" fg:w="1"/><text x="100.1216%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (1 samples, 0.02%)</title><rect x="99.8716%" y="37" width="0.0214%" height="15" fill="rgb(249,21,11)" fg:x="4667" fg:w="1"/><text x="100.1216%" y="47.50"></text></g><g><title>muehlespiel`alloc::fmt::format::format_inner (2 samples, 0.04%)</title><rect x="99.8716%" y="197" width="0.0428%" height="15" fill="rgb(222,201,40)" fg:x="4667" fg:w="2"/><text x="100.1216%" y="207.50"></text></g><g><title>muehlespiel`core::fmt::write (2 samples, 0.04%)</title><rect x="99.8716%" y="181" width="0.0428%" height="15" fill="rgb(235,61,29)" fg:x="4667" fg:w="2"/><text x="100.1216%" y="191.50"></text></g><g><title>muehlespiel`core::fmt::num::_&lt;impl core::fmt::Binary for i16&gt;::fmt (2 samples, 0.04%)</title><rect x="99.8716%" y="165" width="0.0428%" height="15" fill="rgb(219,207,3)" fg:x="4667" fg:w="2"/><text x="100.1216%" y="175.50"></text></g><g><title>muehlespiel`core::fmt::Formatter::pad_integral (2 samples, 0.04%)</title><rect x="99.8716%" y="149" width="0.0428%" height="15" fill="rgb(222,56,46)" fg:x="4667" fg:w="2"/><text x="100.1216%" y="159.50"></text></g><g><title>muehlespiel`&lt;&amp;mut W as core::fmt::Write&gt;::write_char (2 samples, 0.04%)</title><rect x="99.8716%" y="133" width="0.0428%" height="15" fill="rgb(239,76,54)" fg:x="4667" fg:w="2"/><text x="100.1216%" y="143.50"></text></g><g><title>muehlespiel`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.04%)</title><rect x="99.8716%" y="117" width="0.0428%" height="15" fill="rgb(231,124,27)" fg:x="4667" fg:w="2"/><text x="100.1216%" y="127.50"></text></g><g><title>muehlespiel`alloc::raw_vec::finish_grow (2 samples, 0.04%)</title><rect x="99.8716%" y="101" width="0.0428%" height="15" fill="rgb(249,195,6)" fg:x="4667" fg:w="2"/><text x="100.1216%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="99.8930%" y="85" width="0.0214%" height="15" fill="rgb(237,174,47)" fg:x="4668" fg:w="1"/><text x="100.1430%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="99.8930%" y="69" width="0.0214%" height="15" fill="rgb(206,201,31)" fg:x="4668" fg:w="1"/><text x="100.1430%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.02%)</title><rect x="99.8930%" y="53" width="0.0214%" height="15" fill="rgb(231,57,52)" fg:x="4668" fg:w="1"/><text x="100.1430%" y="63.50"></text></g><g><title>dyld`start (4,670 samples, 99.94%)</title><rect x="0.0000%" y="325" width="99.9358%" height="15" fill="rgb(248,177,22)" fg:x="0" fg:w="4670"/><text x="0.2500%" y="335.50">dyld`start</text></g><g><title>muehlespiel`main (4,669 samples, 99.91%)</title><rect x="0.0214%" y="309" width="99.9144%" height="15" fill="rgb(215,211,37)" fg:x="1" fg:w="4669"/><text x="0.2714%" y="319.50">muehlespiel`main</text></g><g><title>muehlespiel`std::rt::lang_start_internal (4,669 samples, 99.91%)</title><rect x="0.0214%" y="293" width="99.9144%" height="15" fill="rgb(241,128,51)" fg:x="1" fg:w="4669"/><text x="0.2714%" y="303.50">muehlespiel`std::rt::lang_start_internal</text></g><g><title>muehlespiel`std::rt::lang_start::_{{closure}} (4,669 samples, 99.91%)</title><rect x="0.0214%" y="277" width="99.9144%" height="15" fill="rgb(227,165,31)" fg:x="1" fg:w="4669"/><text x="0.2714%" y="287.50">muehlespiel`std::rt::lang_start::_{{closure}}</text></g><g><title>muehlespiel`std::sys_common::backtrace::__rust_begin_short_backtrace (4,669 samples, 99.91%)</title><rect x="0.0214%" y="261" width="99.9144%" height="15" fill="rgb(228,167,24)" fg:x="1" fg:w="4669"/><text x="0.2714%" y="271.50">muehlespiel`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>muehlespiel`muehlespiel::main (4,655 samples, 99.61%)</title><rect x="0.3210%" y="245" width="99.6148%" height="15" fill="rgb(228,143,12)" fg:x="15" fg:w="4655"/><text x="0.5710%" y="255.50">muehlespiel`muehlespiel::main</text></g><g><title>muehlespiel`muehlespiel::producer::lost_positions::lost_positions::all_lost_positions (2,337 samples, 50.01%)</title><rect x="49.9251%" y="229" width="50.0107%" height="15" fill="rgb(249,149,8)" fg:x="2333" fg:w="2337"/><text x="50.1751%" y="239.50">muehlespiel`muehlespiel::producer::lost_positions::lost_positions::all_lost_positi..</text></g><g><title>muehlespiel`muehlespiel::producer::lost_positions::by_pieces_taken::is_canonical_free_at (11 samples, 0.24%)</title><rect x="99.7004%" y="213" width="0.2354%" height="15" fill="rgb(243,35,44)" fg:x="4659" fg:w="11"/><text x="99.9504%" y="223.50"></text></g><g><title>muehlespiel`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.02%)</title><rect x="99.9144%" y="197" width="0.0214%" height="15" fill="rgb(246,89,9)" fg:x="4669" fg:w="1"/><text x="100.1644%" y="207.50"></text></g><g><title>muehlespiel`alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="99.9144%" y="181" width="0.0214%" height="15" fill="rgb(233,213,13)" fg:x="4669" fg:w="1"/><text x="100.1644%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.02%)</title><rect x="99.9144%" y="165" width="0.0214%" height="15" fill="rgb(233,141,41)" fg:x="4669" fg:w="1"/><text x="100.1644%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.02%)</title><rect x="99.9144%" y="149" width="0.0214%" height="15" fill="rgb(239,167,4)" fg:x="4669" fg:w="1"/><text x="100.1644%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.02%)</title><rect x="99.9144%" y="133" width="0.0214%" height="15" fill="rgb(209,217,16)" fg:x="4669" fg:w="1"/><text x="100.1644%" y="143.50"></text></g><g><title>all (4,673 samples, 100%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(219,88,35)" fg:x="0" fg:w="4673"/><text x="0.2500%" y="351.50"></text></g><g><title>libsystem_kernel.dylib`__exit (3 samples, 0.06%)</title><rect x="99.9358%" y="325" width="0.0642%" height="15" fill="rgb(220,193,23)" fg:x="4670" fg:w="3"/><text x="100.1858%" y="335.50"></text></g></svg></svg>